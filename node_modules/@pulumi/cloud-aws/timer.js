"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const aws = require("@pulumi/aws");
const pulumi = require("@pulumi/pulumi");
const errors_1 = require("@pulumi/pulumi/errors");
const function_1 = require("./function");
function interval(name, options, handler, opts) {
    let rateMinutes = 0;
    if (options.minutes) {
        rateMinutes += options.minutes;
    }
    if (options.hours) {
        rateMinutes += options.hours * 60;
    }
    if (options.days) {
        rateMinutes += options.days * 60 * 24;
    }
    let unit = "minutes";
    if (rateMinutes < 1) {
        throw new errors_1.RunError("Interval must be at least 1 minute");
    }
    if (rateMinutes === 1) {
        unit = "minute";
    }
    createScheduledEvent(name, `rate(${rateMinutes} ${unit})`, handler, opts);
}
exports.interval = interval;
function cron(name, cronTab, handler, opts) {
    createScheduledEvent(name, `cron(${cronTab})`, handler, opts);
}
exports.cron = cron;
function daily(name, scheduleOrHandler, handlerOrOptions, opts) {
    let hour;
    let minute;
    let handler;
    if (typeof scheduleOrHandler === "function") {
        hour = 0;
        minute = 0;
        handler = scheduleOrHandler;
        opts = handlerOrOptions;
    }
    else if (!scheduleOrHandler) {
        throw new errors_1.RunError("Missing required timer handler function");
    }
    else {
        hour = scheduleOrHandler.hourUTC || 0;
        minute = scheduleOrHandler.minuteUTC || 0;
        handler = handlerOrOptions;
    }
    cron(name, `${minute} ${hour} * * ? *`, handler, opts);
}
exports.daily = daily;
function hourly(name, scheduleOrHandler, handlerOrOptions, opts) {
    let minute;
    let handler;
    if (typeof scheduleOrHandler === "function") {
        minute = 0;
        handler = scheduleOrHandler;
        opts = handlerOrOptions;
    }
    else if (!scheduleOrHandler) {
        throw new errors_1.RunError("Missing required timer handler function");
    }
    else {
        minute = scheduleOrHandler.minuteUTC || 0;
        handler = handlerOrOptions;
    }
    cron(name, `${minute} * * * ? *`, handler, opts);
}
exports.hourly = hourly;
class Timer extends pulumi.ComponentResource {
    constructor(name, scheduleExpression, handler, opts) {
        super("cloud:timer:Timer", name, {}, opts);
        this.scheduleExpression = scheduleExpression;
        this.function = function_1.createFunction(name, (ev, ctx, cb) => {
            handler().then(() => {
                cb(null, null);
            }).catch((err) => {
                cb(err, null);
            });
        }, { parent: this });
        this.rule = new aws.cloudwatch.EventRule(name, {
            scheduleExpression: scheduleExpression,
        }, { parent: this });
        this.target = new aws.cloudwatch.EventTarget(name, {
            rule: this.rule.name,
            arn: this.function.lambda.arn,
            targetId: name,
        }, { parent: this });
        const permission = new aws.lambda.Permission(name, {
            action: "lambda:invokeFunction",
            function: this.function.lambda,
            principal: "events.amazonaws.com",
            sourceArn: this.rule.arn,
        }, { parent: this });
        this.scheduleExpression = scheduleExpression;
        this.registerOutputs({
            scheduleExpression,
            rule: this.rule,
            target: this.target,
            permission: permission,
        });
    }
}
function createScheduledEvent(name, scheduleExpression, handler, opts) {
    const t = new Timer(name, scheduleExpression, handler, opts);
}
//# sourceMappingURL=timer.js.map