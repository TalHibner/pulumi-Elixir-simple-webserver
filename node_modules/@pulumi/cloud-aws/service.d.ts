import * as aws from "@pulumi/aws";
import * as cloud from "@pulumi/cloud";
import * as pulumi from "@pulumi/pulumi";
import { CloudCluster } from "./shared";
export interface Endpoint extends cloud.Endpoint {
    loadBalancer: aws.elasticloadbalancingv2.LoadBalancer;
}
export declare type Endpoints = {
    [containerName: string]: {
        [port: number]: Endpoint;
    };
};
export interface ServiceArguments extends cloud.ServiceArguments {
    /**
     * Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent
     * premature shutdown, up to 7200. Only valid for services configured to use load balancers.
     */
    healthCheckGracePeriodSeconds?: pulumi.Input<number>;
}
export declare class Service extends pulumi.ComponentResource implements cloud.Service {
    readonly name: string;
    readonly containers: cloud.Containers;
    readonly replicas: number;
    readonly cluster: CloudCluster;
    readonly ecsService: aws.ecs.Service;
    readonly taskDefinition: aws.ecs.TaskDefinition;
    readonly logGroup: aws.cloudwatch.LogGroup;
    readonly endpoints: pulumi.Output<Endpoints>;
    readonly defaultEndpoint: pulumi.Output<Endpoint>;
    readonly getEndpoint: (containerName?: string, containerPort?: number) => Promise<Endpoint>;
    static getTaskRole(): aws.iam.Role;
    constructor(name: string, args: ServiceArguments, opts?: pulumi.ResourceOptions);
}
export declare class SharedVolume extends pulumi.ComponentResource implements cloud.SharedVolume {
    readonly kind: "SharedVolume";
    readonly name: string;
    constructor(name: string, opts?: pulumi.ResourceOptions);
}
export declare class HostPathVolume implements cloud.HostPathVolume {
    readonly kind = "HostPathVolume";
    readonly path: string;
    constructor(path: string);
}
/**
 * A Task represents a container which can be [run] dynamically whenever (and as many times as) needed.
 */
export declare class Task extends pulumi.ComponentResource implements cloud.Task {
    readonly cluster: CloudCluster;
    readonly taskDefinition: aws.ecs.TaskDefinition;
    readonly logGroup: aws.cloudwatch.LogGroup;
    readonly run: (options?: cloud.TaskRunOptions) => Promise<void>;
    static getTaskRole(): aws.iam.Role;
    constructor(name: string, container: cloud.Container, opts?: pulumi.ResourceOptions);
}
