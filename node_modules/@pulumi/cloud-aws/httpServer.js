"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const awsx = require("@pulumi/awsx");
const pulumi = require("@pulumi/pulumi");
const function_1 = require("./function");
const serverlessExpress = require("aws-serverless-express");
class HttpServer extends pulumi.ComponentResource {
    constructor(name, createRequestListener, opts = {}) {
        super("cloud:httpserver:HttpServer", name, {}, opts);
        // Create the main aws lambda entrypoint factory function.  Note that this is a factory
        // function so that we can create the underlying server once, and then call into it with
        // each request we get.
        const entryPointFactory = () => {
            // Pass */* as the binary mime types.  This tells aws-serverless-express to effectively
            // treat all messages as binary and not reinterpret them.
            const server = serverlessExpress.createServer(createRequestListener(), /*serverListenCallback*/ undefined, /*binaryMimeTypes*/ ["*/*"]);
            // All the entrypoint function for the Lambda has to do is pass the events along to the
            // server we created above.  That server will then forward the messages along to the
            // request listener provided by the caller.
            return (event, context) => {
                serverlessExpress.proxy(server, event, context);
            };
        };
        // Now, create the actual AWS lambda from that factory function.
        const func = function_1.createFactoryFunction(name, entryPointFactory, { parent: this });
        const api = new awsx.apigateway.API(name, {
            // Register two paths in the Swagger spec, for the root and for a catch all under the
            // root.  Both paths will map to the single AWS lambda created above.
            routes: [
                {
                    path: "/",
                    method: "ANY",
                    eventHandler: func.lambda,
                },
                {
                    path: "/{proxy+}",
                    method: "ANY",
                    eventHandler: func.lambda,
                },
            ],
        }, { parent: this });
        this.url = api.url;
        this.registerOutputs({
            api,
            url: this.url,
        });
    }
}
exports.HttpServer = HttpServer;
//# sourceMappingURL=httpServer.js.map