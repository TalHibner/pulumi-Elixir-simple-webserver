import * as aws from "@pulumi/aws";
import * as awsx from "@pulumi/awsx";
import * as cloud from "@pulumi/cloud";
import * as pulumi from "@pulumi/pulumi";
export interface StaticRoute {
    path: string;
    localPath: string;
    options: cloud.ServeStaticOptions;
}
export interface ProxyRoute {
    path: string;
    target: string | pulumi.Output<cloud.Endpoint>;
}
export interface Route {
    method: string;
    path: string;
    handlers: cloud.RouteHandler[];
}
export interface AWSDomain {
    domainName: string;
    certificateArn: pulumi.Input<string>;
}
export declare type Domain = cloud.Domain | AWSDomain;
export declare class API implements cloud.API {
    private readonly name;
    private readonly staticRoutes;
    private readonly proxyRoutes;
    private readonly routes;
    private readonly customDomains;
    deployment?: HttpDeployment;
    constructor(name: string);
    static(path: string, localPath: string, options?: cloud.ServeStaticOptions): void;
    proxy(path: string, target: string | pulumi.Output<cloud.Endpoint>): void;
    route(method: string, path: string, ...handlers: cloud.RouteHandler[]): void;
    get(path: string, ...handlers: cloud.RouteHandler[]): void;
    put(path: string, ...handlers: cloud.RouteHandler[]): void;
    post(path: string, ...handlers: cloud.RouteHandler[]): void;
    delete(path: string, ...handlers: cloud.RouteHandler[]): void;
    options(path: string, ...handlers: cloud.RouteHandler[]): void;
    all(path: string, ...handlers: cloud.RouteHandler[]): void;
    attachCustomDomain(domain: Domain): void;
    publish(): HttpDeployment;
}
export declare class HttpDeployment extends pulumi.ComponentResource implements cloud.HttpDeployment {
    readonly staticRoutes: StaticRoute[];
    readonly proxyRoutes: ProxyRoute[];
    readonly routes: Route[];
    readonly api: awsx.apigateway.API;
    readonly url: pulumi.Output<string>;
    readonly customDomainNames: pulumi.Output<string>[];
    readonly customDomains: aws.apigateway.DomainName[];
    private static registerCustomDomains;
    constructor(name: string, staticRoutes: StaticRoute[], proxyRoutes: ProxyRoute[], routes: Route[], customDomains: Domain[], opts?: pulumi.ResourceOptions);
}
/**
 * @deprecated HttpEndpoint has been renamed to API
 */
export declare type HttpEndpoint = API;
/**
 * @deprecated HttpEndpoint has been renamed to API
 */
export declare let HttpEndpoint: typeof API;
