"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const aws = require("@pulumi/aws");
const pulumi = require("@pulumi/pulumi");
const config_1 = require("./config");
const shared_1 = require("./shared");
function createFunction(name, handler, opts) {
    return new Function(name, handler, /*isFactoryFunction*/ false, opts);
}
exports.createFunction = createFunction;
function createFactoryFunction(name, handler, opts) {
    return new Function(name, handler, /*isFactoryFunction*/ true, opts);
}
exports.createFactoryFunction = createFactoryFunction;
function createCallbackFunction(name, handler, isFactoryFunction, opts) {
    const policies = [...shared_1.getComputeIAMRolePolicies()];
    let vpcConfig;
    if (shared_1.runLambdaInVPC) {
        const network = shared_1.getOrCreateNetwork();
        // TODO[terraform-providers/terraform-provider-aws#1507]: Updates which cause existing Lambdas to need to
        //     add VPC access will currently fail due to an issue in the Terraform provider.
        policies.push(aws.iam.AWSLambdaVPCAccessExecutionRole);
        vpcConfig = {
            securityGroupIds: pulumi.all(network.securityGroupIds),
            subnetIds: pulumi.all(network.subnetIds),
        };
    }
    // First allocate a function.
    const args = {
        policies,
        vpcConfig,
        memorySize: config_1.functionMemorySize,
        codePathOptions: {
            extraIncludePaths: config_1.functionIncludePaths,
            extraIncludePackages: config_1.functionIncludePackages,
        },
        callback: isFactoryFunction ? undefined : handler,
        callbackFactory: isFactoryFunction ? handler : undefined,
    };
    return new aws.lambda.CallbackFunction(name, args, opts);
}
exports.createCallbackFunction = createCallbackFunction;
// Function is a wrapper over aws.serverless.Function which configures policies and VPC settings based on
// `@pulumi/cloud` configuration.
class Function extends pulumi.ComponentResource {
    constructor(name, handler, isFactoryFunction, opts) {
        super("cloud:function:Function", name, {}, opts);
        this.handler = handler;
        this.lambda = createCallbackFunction(name, handler, isFactoryFunction, { parent: this });
        this.registerOutputs({
            handler: this.handler,
            lambda: this.lambda,
        });
    }
}
exports.Function = Function;
//# sourceMappingURL=function.js.map