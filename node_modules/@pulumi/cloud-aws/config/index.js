"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const errors_1 = require("@pulumi/pulumi/errors");
const config = new pulumi.Config("cloud-aws");
// TODO[pulumi/pulumi-cloud#134]: We need to clean up the set of options available on `cloud-aws`
// and potentially reduce the dimentionality of the available configuration space.
/**
 * Optionally override the Lambda function memory size for all functions.
 */
exports.functionMemorySize = config.getNumber("functionMemorySize") || 128;
if (exports.functionMemorySize % 64 !== 0 || exports.functionMemorySize < 128 || exports.functionMemorySize > 1536) {
    throw new errors_1.RunError("Lambda memory size in MiB must be a multiple of 64 between 128 and 1536.");
}
const functionIncludePathsString = config.get("functionIncludePaths");
/**
 * Comma-seperated list of additional paths (relative to the project root) to include in Lambda zip uploads for
 * JavaScript callbacks.  E.g "./img.png,app/".
 */
exports.functionIncludePaths = undefined;
if (functionIncludePathsString) {
    exports.functionIncludePaths = functionIncludePathsString.split(",");
}
const functionIncludePackagesString = config.get("functionIncludePackages");
/**
 * Comma-seperated list of additional packages (relative to the project root) to include in Lambda zip uploads for
 * JavaScript callbacks.  E.g "body-parser,typescript".
 */
exports.functionIncludePackages = undefined;
if (functionIncludePackagesString) {
    exports.functionIncludePackages = functionIncludePackagesString.split(",");
}
/**
 * Set the IAM role policies to apply to compute (both Lambda and ECS) within this Pulumi program. The default is:
 * "arn:aws:iam::aws:policy/AWSLambdaFullAccess,arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess".
 */
exports.computeIAMRolePolicyARNs = config.get("computeIAMRolePolicyARNs");
/**
 * Optional ACM certificate ARN to support services HTTPS traffic.
 */
exports.acmCertificateARN = config.get("acmCertificateARN");
/**
 * Optional ECS cluster ARN.  If not provided, `Service`s and `Task`s are not available for the target
 * environment.
 */
exports.ecsClusterARN = config.get("ecsClusterARN");
/**
 * Optional ECS cluster security group that all ALBs for services within the cluster will use.
 */
exports.ecsClusterSecurityGroup = config.get("ecsClusterSecurityGroup");
/**
 * Optional EFS mount path on the cluster hosts.  If not provided, `Volumes` cannot be used in `Service`s and `Task`s.
 */
exports.ecsClusterEfsMountPath = config.get("ecsClusterEfsMountPath");
/**
 * Optionally put all compute in a private network with no Internet ingress except via explicit API.
 */
exports.usePrivateNetwork = config.getBoolean("usePrivateNetwork") || false;
/**
 * Use an existing VPC.  If both `usePrivateNetwork` and `externalVpcId` are provided, the VPC must be configured to run
 * all compute in private subnets with Internet egress enabled via NAT Gateways.
 */
exports.externalVpcId = config.get("externalVpcId");
const externalSubnetsString = config.get("externalSubnets");
/**
 * Provide subnets ids for the VPC as a comma-seperated string.  Required if using an existing VPC.
 */
exports.externalSubnets = undefined;
if (externalSubnetsString) {
    exports.externalSubnets = externalSubnetsString.split(",");
}
const externalPublicSubnetsString = config.get("externalPublicSubnets");
/**
 * Provide public subnets ids for the VPC as a comma-seperated string.  Required if using an existing VPC.
 */
exports.externalPublicSubnets = undefined;
if (externalPublicSubnetsString) {
    exports.externalPublicSubnets = externalPublicSubnetsString.split(",");
}
const externalSecurityGroupsString = config.get("externalSecurityGroups");
/**
 * Provide securityGroup ids for the VPC as a comma-seperated string.  Required if using an existing VPC.
 */
exports.externalSecurityGroups = undefined;
if (externalSecurityGroupsString) {
    exports.externalSecurityGroups = externalSecurityGroupsString.split(",");
}
if (exports.externalVpcId && (!exports.externalSubnets || !exports.externalSecurityGroups)) {
    throw new errors_1.RunError("Must configure 'cloud-aws:externalSubnets' and 'cloud-aws:externalSecurityGroups' " +
        "when setting 'cloud-asws:externalVpcId'");
}
/**
 * Optionally use Fargate-based container compute. All tasks must be Fargate-compatible.
 */
exports.useFargate = config.getBoolean("useFargate") || false;
/**
 * Optionally auto-provision an ECS Cluster.  If set to true, parameters for the cluster can be provided via
 * the other "ecsAutoCluster*" configuration variables.
 */
exports.ecsAutoCluster = config.getBoolean("ecsAutoCluster") || false;
/**
 * The number of AZs to create subnets in as part of the cluster.  Defaults to 2.
 */
exports.ecsAutoClusterNumberOfAZs = config.getNumber("ecsAutoClusterNumberOfAZs");
/**
 * The EC2 instance type to use for the cluster.  Defaults to `t2.micro`.
 */
exports.ecsAutoClusterInstanceType = config.get("ecsAutoClusterInstanceType");
/**
 * The EC2 instance role policy ARN to use for the cluster.  Defaults to
 * `arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role,
 *  arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess`.
 */
exports.ecsAutoClusterInstanceRolePolicyARNs = config.get("ecsAutoClusterInstanceRolePolicyARNs");
/**
 * The size (in GiB) of the EBS volume to attach to each instance as the root volume.  Defaults to 8 GiB.
 */
exports.ecsAutoClusterInstanceRootVolumeSize = config.getNumber("ecsAutoClusterInstanceRootVolumeSize");
/**
 * The size (in GiB) of the EBS volume to attach to each instance as Docker Image volume.  Defaults to 50 GiB.
 */
exports.ecsAutoClusterInstanceDockerImageVolumeSize = config.getNumber("ecsAutoClusterInstanceDockerImageVolumeSize");
/**
 * The size (in GiB) of the EBS volume to attach to each instance as the swap volume.  Defaults to 5 GiB.
 */
exports.ecsAutoClusterInstanceSwapVolumeSize = config.getNumber("ecsAutoClusterInstanceSwapVolumeSize");
/**
 * The minimum size of the cluster. Defaults to 2.
 */
exports.ecsAutoClusterMinSize = config.getNumber("ecsAutoClusterMinSize");
/**
 * The maximum size of the cluster. Defaults to 100.
 */
exports.ecsAutoClusterMaxSize = config.getNumber("ecsAutoClusterMaxSize");
/**
 * Public key material for SSH access to the cluster. See allowed formats at:
 * https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html
 * If not provided, no SSH access is enabled on VMs.
 */
exports.ecsAutoClusterPublicKey = config.get("ecsAutoClusterPublicKey");
/**
 * The name of the ECS-optimzed AMI to use for the Container Instances in this cluster, e.g.
 * "amzn-ami-2017.09.l-amazon-ecs-optimized".
 *
 * See http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html for valid values.
 */
exports.ecsAutoClusterECSOptimizedAMIName = config.get("ecsAutoClusterECSOptimizedAMIName");
/**
 * Optionally auto-provision an Elastic File System for the Cluster.  Defaults to false.
 */
exports.ecsAutoClusterUseEFS = config.getBoolean("ecsAutoClusterUseEFS") || false;
/**
 * setEcsCluster configures the ambient ECS cluster imperatively rather than using standard configuration.
 */
function setEcsCluster(cluster, securityGroup, efsMountPath) {
    exports.ecsClusterARN = cluster.name;
    if (securityGroup) {
        exports.ecsClusterSecurityGroup = securityGroup;
    }
    if (efsMountPath) {
        exports.ecsClusterEfsMountPath = efsMountPath;
    }
}
exports.setEcsCluster = setEcsCluster;
//# sourceMappingURL=index.js.map