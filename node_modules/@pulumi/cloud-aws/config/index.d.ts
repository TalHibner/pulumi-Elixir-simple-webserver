import * as aws from "@pulumi/aws";
import * as pulumi from "@pulumi/pulumi";
/**
 * Optionally override the Lambda function memory size for all functions.
 */
export declare let functionMemorySize: number;
/**
 * Comma-seperated list of additional paths (relative to the project root) to include in Lambda zip uploads for
 * JavaScript callbacks.  E.g "./img.png,app/".
 */
export declare let functionIncludePaths: string[] | undefined;
/**
 * Comma-seperated list of additional packages (relative to the project root) to include in Lambda zip uploads for
 * JavaScript callbacks.  E.g "body-parser,typescript".
 */
export declare let functionIncludePackages: string[] | undefined;
/**
 * Set the IAM role policies to apply to compute (both Lambda and ECS) within this Pulumi program. The default is:
 * "arn:aws:iam::aws:policy/AWSLambdaFullAccess,arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess".
 */
export declare let computeIAMRolePolicyARNs: string | undefined;
/**
 * Optional ACM certificate ARN to support services HTTPS traffic.
 */
export declare let acmCertificateARN: string | undefined;
/**
 * Optional ECS cluster ARN.  If not provided, `Service`s and `Task`s are not available for the target
 * environment.
 */
export declare let ecsClusterARN: pulumi.Input<string> | undefined;
/**
 * Optional ECS cluster security group that all ALBs for services within the cluster will use.
 */
export declare let ecsClusterSecurityGroup: pulumi.Input<string> | undefined;
/**
 * Optional EFS mount path on the cluster hosts.  If not provided, `Volumes` cannot be used in `Service`s and `Task`s.
 */
export declare let ecsClusterEfsMountPath: string | undefined;
/**
 * Optionally put all compute in a private network with no Internet ingress except via explicit API.
 */
export declare let usePrivateNetwork: boolean;
/**
 * Use an existing VPC.  If both `usePrivateNetwork` and `externalVpcId` are provided, the VPC must be configured to run
 * all compute in private subnets with Internet egress enabled via NAT Gateways.
 */
export declare let externalVpcId: string | undefined;
/**
 * Provide subnets ids for the VPC as a comma-seperated string.  Required if using an existing VPC.
 */
export declare let externalSubnets: string[] | undefined;
/**
 * Provide public subnets ids for the VPC as a comma-seperated string.  Required if using an existing VPC.
 */
export declare let externalPublicSubnets: string[] | undefined;
/**
 * Provide securityGroup ids for the VPC as a comma-seperated string.  Required if using an existing VPC.
 */
export declare let externalSecurityGroups: string[] | undefined;
/**
 * Optionally use Fargate-based container compute. All tasks must be Fargate-compatible.
 */
export declare let useFargate: boolean;
/**
 * Optionally auto-provision an ECS Cluster.  If set to true, parameters for the cluster can be provided via
 * the other "ecsAutoCluster*" configuration variables.
 */
export declare let ecsAutoCluster: boolean;
/**
 * The number of AZs to create subnets in as part of the cluster.  Defaults to 2.
 */
export declare let ecsAutoClusterNumberOfAZs: number | undefined;
/**
 * The EC2 instance type to use for the cluster.  Defaults to `t2.micro`.
 */
export declare let ecsAutoClusterInstanceType: string | undefined;
/**
 * The EC2 instance role policy ARN to use for the cluster.  Defaults to
 * `arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role,
 *  arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess`.
 */
export declare let ecsAutoClusterInstanceRolePolicyARNs: string | undefined;
/**
 * The size (in GiB) of the EBS volume to attach to each instance as the root volume.  Defaults to 8 GiB.
 */
export declare let ecsAutoClusterInstanceRootVolumeSize: number | undefined;
/**
 * The size (in GiB) of the EBS volume to attach to each instance as Docker Image volume.  Defaults to 50 GiB.
 */
export declare let ecsAutoClusterInstanceDockerImageVolumeSize: number | undefined;
/**
 * The size (in GiB) of the EBS volume to attach to each instance as the swap volume.  Defaults to 5 GiB.
 */
export declare let ecsAutoClusterInstanceSwapVolumeSize: number | undefined;
/**
 * The minimum size of the cluster. Defaults to 2.
 */
export declare let ecsAutoClusterMinSize: number | undefined;
/**
 * The maximum size of the cluster. Defaults to 100.
 */
export declare let ecsAutoClusterMaxSize: number | undefined;
/**
 * Public key material for SSH access to the cluster. See allowed formats at:
 * https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html
 * If not provided, no SSH access is enabled on VMs.
 */
export declare let ecsAutoClusterPublicKey: string | undefined;
/**
 * The name of the ECS-optimzed AMI to use for the Container Instances in this cluster, e.g.
 * "amzn-ami-2017.09.l-amazon-ecs-optimized".
 *
 * See http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html for valid values.
 */
export declare let ecsAutoClusterECSOptimizedAMIName: string | undefined;
/**
 * Optionally auto-provision an Elastic File System for the Cluster.  Defaults to false.
 */
export declare let ecsAutoClusterUseEFS: boolean;
/**
 * setEcsCluster configures the ambient ECS cluster imperatively rather than using standard configuration.
 */
export declare function setEcsCluster(cluster: aws.ecs.Cluster, securityGroup?: pulumi.Output<string>, efsMountPath?: string): void;
