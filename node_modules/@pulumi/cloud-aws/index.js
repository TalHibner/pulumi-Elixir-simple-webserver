"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
// Note: We only export APIs with no AWS types exposed We must ensure that consumers of the
// Pulumi framework do not see any types from AWS when calling APIs in these exported modules.
// Note: We only export values (not types) from this module.  Nothing should ever be referencing
// this package.  Instead things should only reference the @pulumi/cloud package.  That package
// actually exports the API types.
__export(require("./bucket"));
__export(require("./function"));
__export(require("./api"));
__export(require("./httpServer"));
__export(require("./table"));
__export(require("./topic"));
__export(require("./service"));
const config = require("./config");
exports.config = config;
const timer = require("./timer");
exports.timer = timer;
// Export internal AWS-only APIs that allows configuring AWS-specific settings.
__export(require("./shared"));
let apiShape = undefined;
const thisShape = undefined;
// This line ensures that our exported API is a superset of the framework API.
apiShape = thisShape;
// This line ensures that we export strictly the same API as the framework API. right now we can't
// uncomment it because our use of private members in classes *does* mean that we're effectively
// exporting a larger surface area.  We can solve this in the future by using the IIFE pattern.
// thisShape = frameworkShape;
//# sourceMappingURL=index.js.map