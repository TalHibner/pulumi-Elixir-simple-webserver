import * as aws from "@pulumi/aws";
import * as pulumi from "@pulumi/pulumi";
import * as clusterMod from "./cluster";
export interface CloudNetwork extends clusterMod.ClusterNetworkArgs {
    /**
     * Whether the network includes private subnets.
     */
    readonly usePrivateSubnets: boolean;
    /**
     * The security group IDs for the network.
     */
    readonly securityGroupIds: pulumi.Output<string>[];
    /**
     * The public subnets for the VPC.  In case [usePrivateSubnets] == false, these are the same as [subnets].
     */
    readonly publicSubnetIds: pulumi.Output<string>[];
}
export declare function createNameWithStackInfo(requiredInfo: string): string;
export declare function getGlobalInfrastructureResource(): pulumi.Resource;
export declare let runLambdaInVPC: boolean;
export declare function setComputeIAMRolePolicies(policyARNs: string[]): void;
export declare function getComputeIAMRolePolicies(): aws.ARN[];
/**
 * Get or create the network to use for container and lambda compute.
 */
export declare function getOrCreateNetwork(): CloudNetwork;
/**
 * @deprecated
 */
export declare function getNetwork(): CloudNetwork;
export interface CloudCluster {
    readonly ecsClusterARN: pulumi.Output<string>;
    readonly securityGroupId?: pulumi.Output<string>;
    readonly efsMountPath?: string;
    readonly autoScalingGroupStack?: any;
}
export declare function getCluster(): CloudCluster | undefined;
