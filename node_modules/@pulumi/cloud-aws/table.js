"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const aws = require("@pulumi/aws");
const pulumi = require("@pulumi/pulumi");
const errors_1 = require("@pulumi/pulumi/errors");
function pulumiKeyTypeToDynamoKeyType(keyType) {
    switch (keyType) {
        case "string": return "S";
        case "number": return "N";
        case "boolean": return "B";
        default: throw new errors_1.RunError(`Unsupported key type ${keyType} - expected "string", "number" or "boolean"`);
    }
}
const consistentRead = true;
class Table extends pulumi.ComponentResource {
    constructor(name, primaryKey, primaryKeyType, opts) {
        if (primaryKey === undefined) {
            primaryKey = "id";
        }
        if (primaryKeyType === undefined) {
            primaryKeyType = "string";
        }
        super("cloud:table:Table", name, {}, opts);
        this.primaryKey = pulumi.output(primaryKey);
        this.primaryKeyType = pulumi.output(primaryKeyType);
        this.dynamodbTable = new aws.dynamodb.Table(name, {
            attributes: [{
                    name: primaryKey,
                    type: pulumi.output(primaryKeyType).apply(t => pulumiKeyTypeToDynamoKeyType(t)),
                }],
            hashKey: primaryKey,
            billingMode: "PAY_PER_REQUEST",
        }, { parent: this });
        const tableName = this.dynamodbTable.name;
        this.get = (query) => __awaiter(this, void 0, void 0, function* () {
            const db = new aws.sdk.DynamoDB.DocumentClient();
            const result = yield db.get({
                TableName: tableName.get(),
                Key: query,
                ConsistentRead: consistentRead,
            }).promise();
            return result.Item;
        });
        this.insert = (item) => __awaiter(this, void 0, void 0, function* () {
            const db = new aws.sdk.DynamoDB.DocumentClient();
            yield db.put({
                TableName: tableName.get(),
                Item: item,
            }).promise();
        });
        this.scan = ((callback) => __awaiter(this, void 0, void 0, function* () {
            let items;
            if (callback === undefined) {
                items = [];
                callback = (page) => {
                    items.push(...page);
                    return Promise.resolve(true);
                };
            }
            const db = new aws.sdk.DynamoDB.DocumentClient();
            const params = {
                TableName: tableName.get(),
                ConsistentRead: consistentRead,
            };
            while (true) {
                const result = yield db.scan(params).promise();
                const acceptMore = yield callback(result.Items);
                if (!acceptMore || (result.LastEvaluatedKey === undefined)) {
                    break;
                }
                params.ExclusiveStartKey = result.LastEvaluatedKey;
            }
            if (items !== undefined) {
                return items;
            }
            else {
                return;
            }
        }));
        this.update = (query, updates) => __awaiter(this, void 0, void 0, function* () {
            let updateExpression = "";
            const attributeValues = {};
            for (const key of Object.keys(updates)) {
                const val = updates[key];
                if (updateExpression === "") {
                    updateExpression += "SET ";
                }
                else {
                    updateExpression += ", ";
                }
                updateExpression += `${key} = :${key}`;
                attributeValues[`:${key}`] = val;
            }
            const db = new aws.sdk.DynamoDB.DocumentClient();
            yield db.update({
                TableName: tableName.get(),
                Key: query,
                UpdateExpression: updateExpression,
                ExpressionAttributeValues: attributeValues,
            }).promise();
        });
        this.delete = (query) => __awaiter(this, void 0, void 0, function* () {
            const db = new aws.sdk.DynamoDB.DocumentClient();
            yield db.delete({
                TableName: tableName.get(),
                Key: query,
            }).promise();
        });
        this.registerOutputs({
            primaryKey: this.primaryKey,
            primaryKeyType: this.primaryKeyType,
            dynamodbTable: this.dynamodbTable,
        });
    }
}
exports.Table = Table;
//# sourceMappingURL=table.js.map