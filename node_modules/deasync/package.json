{
  "_args": [
    [
      {
        "raw": "deasync@^0.1.15",
        "scope": null,
        "escapedName": "deasync",
        "name": "deasync",
        "rawSpec": "^0.1.15",
        "spec": ">=0.1.15 <0.2.0",
        "type": "range"
      },
      "D:\\interviwes\\pulumi-Elixir-simple-webserver\\node_modules\\@pulumi\\pulumi"
    ]
  ],
  "_from": "deasync@^0.1.15",
  "_hasShrinkwrap": false,
  "_id": "deasync@0.1.19",
  "_location": "/deasync",
  "_nodeVersion": "10.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/deasync_0.1.19_1576857616177_0.9587167203152906"
  },
  "_npmUser": {
    "name": "abbr",
    "email": "wenfred@gmail.com"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "deasync@^0.1.15",
    "scope": null,
    "escapedName": "deasync",
    "name": "deasync",
    "rawSpec": "^0.1.15",
    "spec": ">=0.1.15 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@pulumi/pulumi"
  ],
  "_resolved": "https://registry.npmjs.org/deasync/-/deasync-0.1.19.tgz",
  "_shasum": "e7ea89fcc9ad483367e8a48fe78f508ca86286e8",
  "_shrinkwrap": null,
  "_spec": "deasync@^0.1.15",
  "_where": "D:\\interviwes\\pulumi-Elixir-simple-webserver\\node_modules\\@pulumi\\pulumi",
  "author": {
    "name": "Vladimir Kurchatkin",
    "email": "vladimir.kurchatkin@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/abbr/deasync/issues"
  },
  "contributors": [
    {
      "name": "Fred Wen",
      "email": "wenfred@gmail.com",
      "url": "https://github.com/abbr"
    }
  ],
  "dependencies": {
    "bindings": "^1.5.0",
    "node-addon-api": "^1.7.1"
  },
  "description": "Turns async function into sync via JavaScript wrapper of Node event loop",
  "devDependencies": {
    "require-directory": "^2.1.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-oh3MRktfnPlLysCPpBpKZZzb4cUC/p0aA3SyRGp15lN30juJBTo/CiD0d4fR+f1kBtUQoJj1NE9RPNWQ7BQ9Mg==",
    "shasum": "e7ea89fcc9ad483367e8a48fe78f508ca86286e8",
    "tarball": "https://registry.npmjs.org/deasync/-/deasync-0.1.19.tgz",
    "fileCount": 79,
    "unpackedSize": 4499903,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd/PAQCRA9TVsSAnZWagAAhokQAIn8Mt6F/r9B7dbC2r7g\n1M6DQL2eZCr2uOKxbr4aFMXvJvYCt7LihrWRq1ULHs+d7ytHoyERry9UGrZa\nNyayZBG9QAwfPAMwZwM2T+47U9GixhAE3d/ctDUxi19VM0d2Yo49SIflEgL4\nEj5gn00yDna+eZuVSxpVmwHdMUP3sK/wKDar0f7rLpKPILqlUZnKRkqRF+6w\n0MkaFTKHUd+hxZbhEaEkmxVTVi8rCDJg58cnbYpNRl9iYdcUa/EVgsbmm3cd\n8tW613n3VWb9C+ccki86xq9PCHw+bFcxHzp33jNQcR5y5/1iWLvUV0K+02+g\nmTkRcPZm03Xoqgrh4tuLPqemj9yfIdG8P4uMmEycTAcR3UgxxU917yzttHJR\nkr3yQD3QM1unNAnlgJlFs70LyjuBycA6GwNRVuNNepzcZ8Lx/i8XQFMQuHL3\nSehkm0EqH7Y5ttEZ5lZuLG1J24/ZLkUfy2CDsRVd1PqlwfFSAGXqBlIAXu/v\nmFobEmUvRdpW6EwJlTFFc6566nwg2a9Qu6kMabllgb0xK28/ULaExNdRRjfm\n8LkyPXUqY2fLM2VvdukVXy2HMoEng5j9vNTmxvkAvNBBwAoaAjGnkY1DM3O3\nLmpD3qD42FwWFEvSVAO6x4G9jXymII+jr291XMaacMbcE7xVLnPSEsDwmvFd\nE471\r\n=uXg3\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.11.0"
  },
  "gitHead": "db3c4a3975a86d4e71edc2d098258f73b1706534",
  "homepage": "https://github.com/abbr/deasync",
  "keywords": [
    "async",
    "sync",
    "sleep",
    "async wrapper"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "abbr",
      "email": "wenfred@gmail.com"
    }
  ],
  "name": "deasync",
  "optionalDependencies": {},
  "readme": "DeAsync.js\r\n=======\r\n[![NPM version](http://img.shields.io/npm/v/deasync.svg)](https://www.npmjs.org/package/deasync)\r\n\r\nDeAsync turns async function into sync, implemented with a blocking mechanism by calling Node.js event loop at JavaScript layer. The core of deasync is writen in C++.\r\n\r\n\r\n## Motivation\r\n\r\nSuppose you maintain a library that exposes a function <code>getData</code>. Your users call it to get actual data:   \r\n<code>var myData = getData();</code>  \r\nUnder the hood data is saved in a file so you implemented <code>getData</code> using Node.js built-in <code>fs.readFileSync</code>. It's obvious both <code>getData</code> and <code>fs.readFileSync</code> are sync functions. One day you were told to switch the underlying data source to a repo such as MongoDB which can only be accessed asynchronously. You were also told to avoid pissing off your users, <code>getData</code> API cannot be changed to return merely a promise or demand a callback parameter. How do you meet both requirements?\r\n\r\nYou may tempted to use [node-fibers](https://github.com/laverdet/node-fibers) or a module derived from it, but node fibers can only wrap async function call into a sync function inside a fiber. In the case above you cannot assume all  callers are inside fibers. On the other hand, if you start a fiber in `getData` then `getData` itself will still return immediately without waiting for the async call result. For similar reason ES6 generators introduced in Node v0.11 won't work either. \r\n\r\nWhat really needed is a way to block subsequent JavaScript from running without blocking entire thread by yielding to allow other events in the event loop to be handled. Ideally the blockage is removed as soon as the result of async function is available. A less ideal but often acceptable alternative is a `sleep` function which you can use to implement the blockage like ```while(!done) sleep(100);```. It is less ideal because sleep duration has to be guessed. It is important the `sleep` function not only shouldn't block entire thread, but also shouldn't incur busy wait that pegs the CPU to 100%. \r\n</small>\r\n\r\nDeAsync supports both alternatives.\r\n\r\n\r\n\r\n## Usages\r\n\r\n\r\n* Generic wrapper of async function with conventional API signature `function(p1,...pn,function cb(error,result){})`. Returns `result` and throws `error` as exception if not null:\r\n\r\n```javascript\r\nvar deasync = require('deasync');\r\nvar cp = require('child_process');\r\nvar exec = deasync(cp.exec);\r\n// output result of ls -la\r\ntry{\r\n    console.log(exec('ls -la'));\r\n}\r\ncatch(err){\r\n    console.log(err);\r\n}\r\n// done is printed last, as supposed, with cp.exec wrapped in deasync; first without.\r\nconsole.log('done');\r\n```\r\n\r\n* For async function with unconventional API, for instance `function asyncFunction(p1,function cb(res){})`, use `loopWhile(predicateFunc)` where `predicateFunc` is a function that returns boolean loop condition\r\n\r\n```javascript\r\nvar done = false;\r\nvar data;\r\nasyncFunction(p1,function cb(res){\r\n    data = res;\r\n    done = true;\r\n});\r\nrequire('deasync').loopWhile(function(){return !done;});\r\n// data is now populated\r\n```\r\n\r\n* Sleep (a wrapper of setTimeout)\r\n\r\n```javascript\r\nfunction SyncFunction(){\r\n  var ret;\r\n  setTimeout(function(){\r\n      ret = \"hello\";\r\n  },3000);\r\n  while(ret === undefined) {\r\n    require('deasync').sleep(100);\r\n  }\r\n  // returns hello with sleep; undefined without\r\n  return ret;    \r\n}\r\n```\r\n\r\n## Installation\r\nExcept on a few [ platforms + Node version combinations](https://github.com/abbr/deasync-bin) where binary distribution is included, DeAsync uses node-gyp to compile C++ source code so you may need the compilers listed in [node-gyp](https://github.com/TooTallNate/node-gyp). You may also need to [update npm's bundled node-gyp](https://github.com/TooTallNate/node-gyp/wiki/Updating-npm's-bundled-node-gyp).\r\n\r\nTo install, run\r\n\r\n```npm install deasync```\r\n\r\n\r\n## Recommendation\r\nUnlike other (a)sync js packages that mostly have only syntactic impact, DeAsync also changes code execution sequence. As such, it is intended to solve niche cases like the above one. If all you are facing is syntatic problem such as callback hell, using a less drastic package implemented in pure js is recommended.\r\n\r\n## Support\r\nPull requests and issue reporting are welcome. For issues to be considered by maintainer\r\n  1. they must be reproducible\r\n  2. there must be evidence the issue is related to DeAsync\r\n\r\nTo that end, the issue should contain platform information, error message relevant to DeAsync, and preferably code snippet. If code snippet is supplied, it must be self-contained, i.e. independent from your runtime environment or other modules not explictly specified via `require` in the code snippet.\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/abbr/deasync.git"
  },
  "scripts": {
    "install": "node ./build.js",
    "test": "node spec"
  },
  "version": "0.1.19"
}
