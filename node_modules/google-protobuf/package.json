{
  "_args": [
    [
      {
        "raw": "google-protobuf@^3.5.0",
        "scope": null,
        "escapedName": "google-protobuf",
        "name": "google-protobuf",
        "rawSpec": "^3.5.0",
        "spec": ">=3.5.0 <4.0.0",
        "type": "range"
      },
      "D:\\interviwes\\pulumi-Elixir-simple-webserver\\node_modules\\@pulumi\\pulumi"
    ]
  ],
  "_from": "google-protobuf@^3.5.0",
  "_hasShrinkwrap": false,
  "_id": "google-protobuf@3.11.4",
  "_location": "/google-protobuf",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/google-protobuf_3.11.4_1581718581192_0.6846713442022128"
  },
  "_npmUser": {
    "name": "protobuf-js",
    "email": "haon@google.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "google-protobuf@^3.5.0",
    "scope": null,
    "escapedName": "google-protobuf",
    "name": "google-protobuf",
    "rawSpec": "^3.5.0",
    "spec": ">=3.5.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@pulumi/pulumi"
  ],
  "_resolved": "https://registry.npmjs.org/google-protobuf/-/google-protobuf-3.11.4.tgz",
  "_shasum": "598ca405a3cfa917a2132994d008b5932ef42014",
  "_shrinkwrap": null,
  "_spec": "google-protobuf@^3.5.0",
  "_where": "D:\\interviwes\\pulumi-Elixir-simple-webserver\\node_modules\\@pulumi\\pulumi",
  "author": {
    "name": "Google Protocol Buffers Team"
  },
  "dependencies": {},
  "description": "Protocol Buffers for JavaScript",
  "devDependencies": {
    "glob": "~7.1.4",
    "google-closure-compiler": "~20190819.0.0",
    "google-closure-library": "~20190819.0.0",
    "gulp": "~4.0.2",
    "jasmine": "~3.4.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-lL6b04rDirurUBOgsY2+LalI6Evq8eH5TcNzi7TYQ3BsIWelT0KSOQSBsXuavEkNf+odQU6c0lgz3UsZXeNX9Q==",
    "shasum": "598ca405a3cfa917a2132994d008b5932ef42014",
    "tarball": "https://registry.npmjs.org/google-protobuf/-/google-protobuf-3.11.4.tgz",
    "fileCount": 15,
    "unpackedSize": 778566,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeRxw1CRA9TVsSAnZWagAACvUP/1T0QpMMwZaBbyJ7ABKV\ns8BpTqIvgWRRRY+Ga4N2/qZdtBW2zfMqnmifcPvEYCtdmOXzkQKgT/CEwJ/V\nEJA0W3xQ5R307MYZ8cc0vuUo/sK4/gWhJkbNW1tEt+d7Sz7gxLgaf/1qma9v\nvSpjjb9uOvuLG1Z+G1PBqKwTSNNnZE/S+ef6UVQ4gndJGlLssiJfuDL43SNW\nhW2w/9ww3H1xbYgiaoEmnJ0RVKJ4LQbEig/XSYrMn49OA4REKn4sjbih+fg5\nVMagRaQf9XleW5Wz8VEucQeNNEeYRk6AUDYCQCQ4fHIJTpCl2dZJ52Gz4CX5\nNWQC2KRPtX20PLDq9dQ54++KxDqvbx2a1dXm+g+hA2ByXJ4JjuYMLZUFrNZH\nTJvUPL9gCA8jL+BZKpt0wLFYlF1P+CDidJv/1HK6XK8+gZ7s4RLm2Hu7Vy3X\nfgK4OtQoWXSOMBTtqUuCjkTUD4pGwkVt0CkhJbRNpzQvWwbhLErd3zrYDekd\noFGDCqBvUbiuFHcf4KRIR6foK2GziDi6aTrBDleo7+qiA+aIwEXr+YJ44Fsv\nrrthStirObyNx4757z7xnDKksz86nTJyp4CrCGEbS0F0em4qy1P1Ph1jNaWF\n5ig+X/uAGOtOt5npLJB/9hKGPZ1MK0EJkT9B+/wN2pnS9v8Rt6gWqf7IY8Jg\nWmCI\r\n=NrVN\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "google"
  ],
  "license": "BSD-3-Clause",
  "main": "google-protobuf.js",
  "maintainers": [
    {
      "name": "acozzette",
      "email": "acozzette@gmail.com"
    },
    {
      "name": "haberman",
      "email": "jhaberman@gmail.com"
    },
    {
      "name": "teboring",
      "email": "teboring@google.com"
    },
    {
      "name": "xfxyjwf",
      "email": "xfxyjwf@gmail.com"
    }
  ],
  "name": "google-protobuf",
  "optionalDependencies": {},
  "readme": "Protocol Buffers - Google's data interchange format\n===================================================\n\n[![Build status](https://storage.googleapis.com/protobuf-kokoro-results/status-badge/linux-javascript.png)](https://fusion.corp.google.com/projectanalysis/current/KOKORO/prod:protobuf%2Fgithub%2Fmaster%2Fubuntu%2Fjavascript%2Fcontinuous) [![Build status](https://storage.googleapis.com/protobuf-kokoro-results/status-badge/macos-javascript.png)](https://fusion.corp.google.com/projectanalysis/current/KOKORO/prod:protobuf%2Fgithub%2Fmaster%2Fmacos%2Fjavascript%2Fcontinuous)\n\nCopyright 2008 Google Inc.\n\nThis directory contains the JavaScript Protocol Buffers runtime library.\n\nThe library is currently compatible with:\n\n1. CommonJS-style imports (eg. `var protos = require('my-protos');`)\n2. Closure-style imports (eg. `goog.require('my.package.MyProto');`)\n\nSupport for ES6-style imports is not implemented yet.  Browsers can\nbe supported by using Browserify, webpack, Closure Compiler, etc. to\nresolve imports at compile time.\n\nTo use Protocol Buffers with JavaScript, you need two main components:\n\n1. The protobuf runtime library.  You can install this with\n   `npm install google-protobuf`, or use the files in this directory.\n    If npm is not being used, as of 3.3.0, the files needed are located in binary subdirectory;\n    arith.js, constants.js, decoder.js, encoder.js, map.js, message.js, reader.js, utils.js, writer.js\n2. The Protocol Compiler `protoc`.  This translates `.proto` files\n   into `.js` files.  The compiler is not currently available via\n   npm, but you can download a pre-built binary\n   [on GitHub](https://github.com/protocolbuffers/protobuf/releases)\n   (look for the `protoc-*.zip` files under **Downloads**).\n\n\nSetup\n=====\n\nFirst, obtain the Protocol Compiler.  The easiest way is to download\na pre-built binary from [https://github.com/protocolbuffers/protobuf/releases](https://github.com/protocolbuffers/protobuf/releases).\n\nIf you want, you can compile `protoc` from source instead.  To do this\nfollow the instructions in [the top-level\nREADME](https://github.com/protocolbuffers/protobuf/blob/master/src/README.md).\n\nOnce you have `protoc` compiled, you can run the tests by typing:\n\n    $ cd js\n    $ npm install\n    $ npm test\n\n    # If your protoc is somewhere else than ../src/protoc, instead do this.\n    # But make sure your protoc is the same version as this (or compatible)!\n    $ PROTOC=/usr/local/bin/protoc npm test\n\nThis will run two separate copies of the tests: one that uses\nClosure Compiler style imports and one that uses CommonJS imports.\nYou can see all the CommonJS files in `commonjs_out/`.\nIf all of these tests pass, you know you have a working setup.\n\n\nUsing Protocol Buffers in your own project\n==========================================\n\nTo use Protocol Buffers in your own project, you need to integrate\nthe Protocol Compiler into your build system.  The details are a\nlittle different depending on whether you are using Closure imports\nor CommonJS imports:\n\nClosure Imports\n---------------\n\nIf you want to use Closure imports, your build should run a command\nlike this:\n\n    $ protoc --js_out=library=myproto_libs,binary:. messages.proto base.proto\n\nFor Closure imports, `protoc` will generate a single output file\n(`myproto_libs.js` in this example).  The generated file will `goog.provide()`\nall of the types defined in your .proto files.  For example, for the unit\ntests the generated files contain many `goog.provide` statements like:\n\n    goog.provide('proto.google.protobuf.DescriptorProto');\n    goog.provide('proto.google.protobuf.DescriptorProto.ExtensionRange');\n    goog.provide('proto.google.protobuf.DescriptorProto.ReservedRange');\n    goog.provide('proto.google.protobuf.EnumDescriptorProto');\n    goog.provide('proto.google.protobuf.EnumOptions');\n\nThe generated code will also `goog.require()` many types in the core library,\nand they will require many types in the Google Closure library.  So make sure\nthat your `goog.provide()` / `goog.require()` setup can find all of your\ngenerated code, the core library `.js` files in this directory, and the\nGoogle Closure library itself.\n\nOnce you've done this, you should be able to import your types with\nstatements like:\n\n    goog.require('proto.my.package.MyMessage');\n\n    var message = proto.my.package.MyMessage();\n\nIf unfamiliar with Closure or it's compiler, consider reviewing Closure documentation\nhttps://developers.google.com/closure/library/docs/tutorial\nhttps://developers.google.com/closure/library/docs/closurebuilder\nhttps://developers.google.com/closure/library/docs/depswriter\nAt a high level, closurebuilder.py can walk dependencies, and compile your code, and all dependencies for Protobuf into a single .js file.  Using depsbuilder.py to generate a dependency file can also be considered for non-production dev environments.\n\nCommonJS imports\n----------------\n\nIf you want to use CommonJS imports, your build should run a command\nlike this:\n\n    $ protoc --js_out=import_style=commonjs,binary:. messages.proto base.proto\n\nFor CommonJS imports, `protoc` will spit out one file per input file\n(so `messages_pb.js` and `base_pb.js` in this example).  The generated\ncode will depend on the core runtime, which should be in a file called\n`google-protobuf.js`.  If you are installing from `npm`, this file should\nalready be built and available.  If you are running from GitHub, you need\nto build it first by running:\n\n    $ gulp dist\n\nOnce you've done this, you should be able to import your types with\nstatements like:\n\n    var messages = require('./messages_pb');\n\n    var message = new messages.MyMessage();\n\nThe `--js_out` flag\n-------------------\n\nThe syntax of the `--js_out` flag is:\n\n    --js_out=[OPTIONS:]output_dir\n\nWhere `OPTIONS` are separated by commas.  Options are either `opt=val` or\njust `opt` (for options that don't take a value).  The available options\nare specified and documented in the `GeneratorOptions` struct in\n[src/google/protobuf/compiler/js/js_generator.h](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/compiler/js/js_generator.h#L53).\n\nSome examples:\n\n- `--js_out=library=myprotos_lib.js,binary:.`: this contains the options\n  `library=myprotos.lib.js` and `binary` and outputs to the current directory.\n  The `import_style` option is left to the default, which is `closure`.\n- `--js_out=import_style=commonjs,binary:protos`: this contains the options\n  `import_style=commonjs` and `binary` and outputs to the directory `protos`.\n  `import_style=commonjs_strict` doesn't expose the output on the global scope.\n\nAPI\n===\n\nThe API is not well-documented yet.  Here is a quick example to give you an\nidea of how the library generally works:\n\n    var message = new MyMessage();\n\n    message.setName(\"John Doe\");\n    message.setAge(25);\n    message.setPhoneNumbers([\"800-555-1212\", \"800-555-0000\"]);\n\n    // Serializes to a UInt8Array.\n    var bytes = message.serializeBinary();\n\n    var message2 = MyMessage.deserializeBinary(bytes);\n\nFor more examples, see the tests.  You can also look at the generated code\nto see what methods are defined for your generated messages.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/protocolbuffers/protobuf/tree/master/js"
  },
  "scripts": {
    "test": "node ./node_modules/gulp/bin/gulp.js test"
  },
  "version": "3.11.4"
}
